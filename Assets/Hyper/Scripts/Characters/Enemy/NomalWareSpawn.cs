using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NomalWareSpawn : WareSpawnBase
{    
    [SerializeField] bool IsSpawn = true;
    [SerializeField] List<Wave> waves;
    [System.Serializable]
    public class Wave
    {
        public List<GameObject> enemies; // Danh sách enemy trong wave
    }

    void OnEnable()
    {
        GameEvents.OnNomalWareSpawn += SpawnAction;
    }

    void OnDisable()
    {
        GameEvents.OnNomalWareSpawn -= SpawnAction;
    }

    private List<int> GetWaveIndices(int wareId)
    {
        List<int> waveIndices = new List<int>();

        // Lặp `wareId / 10` lần, mỗi lần thêm `waves[10]`
        int repeatWave10 = wareId / 10;
        for (int i = 0; i < repeatWave10; i++)
        {
            waveIndices.Add(10);
        }

        // Nếu còn dư thì thêm wave tương ứng
        int lastWave = wareId % 10;
        if (lastWave > 0)
        {
            waveIndices.Add(lastWave);
        }

        return waveIndices;
    }

    
    protected override void SpawnAction(int wareId)
    {
        if (!IsSpawn || waves == null || waves.Count == 0)
        {
            return;
        }

        List<int> waveIndices = GetWaveIndices(wareId); // Lấy danh sách wave cần spawn
        foreach (int index in waveIndices)
        {
            if (index >= 1 && index <= waves.Count)
            {
                Wave currentWave = waves[index - 1]; // Lấy wave tương ứng

                foreach (GameObject enemyPrefab in currentWave.enemies)
                {
                    if (enemyPrefab != null)
                    {
                        StartCoroutine(SpawnWithEffect(enemyPrefab, GetRandomSpawnPosition(transform.position)));
                        // GameObject newEnemy = Instantiate(enemyPrefab, GetRandomSpawnPosition(transform.position), Quaternion.identity);
                        // newEnemy.transform.SetParent(enemyPool, true);
                    }
                }
            }
        }
    }
    private IEnumerator SpawnWithEffect(GameObject enemyPrefab, Vector3 position)
    {
        if(spawnEffectPrefab != null)
        {
            GameObject effect = Instantiate(spawnEffectPrefab, position, Quaternion.identity);

            yield return new WaitForSeconds(2f);

            GameObject newEnemy = Instantiate(enemyPrefab, position, Quaternion.identity);
            newEnemy.transform.SetParent(enemyPool, true);

            Destroy(effect);
        }
        else{
            GameObject newEnemy = Instantiate(enemyPrefab, position, Quaternion.identity);
            newEnemy.transform.SetParent(enemyPool, true);
        }
        
    }
    
}
