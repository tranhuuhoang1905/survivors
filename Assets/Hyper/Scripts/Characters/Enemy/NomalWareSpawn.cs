using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NomalWareSpawn : WareSpawn
{
    [SerializeField] GameObject enemy;
    
    [SerializeField] bool IsSpawn = true;
    [SerializeField] List<Wave> waves;
    [SerializeField] private float spawnRadius = 2f; // üî• B√°n k√≠nh random v·ªã tr√≠ spawn
    [System.Serializable]
    public class Wave
    {
        public List<GameObject> enemies; // Danh s√°ch enemy trong wave
    }

    void OnEnable()
    {
        GameEvents.OnNomalWareSpawn += SpawnAction;
    }

    void OnDisable()
    {
        GameEvents.OnNomalWareSpawn -= SpawnAction;
    }

    private List<int> GetWaveIndices(int wareId)
    {
        List<int> waveIndices = new List<int>();

        // L·∫∑p `wareId / 10` l·∫ßn, m·ªói l·∫ßn th√™m `waves[10]`
        int repeatWave10 = wareId / 10;
        for (int i = 0; i < repeatWave10; i++)
        {
            waveIndices.Add(10);
        }

        // N·∫øu c√≤n d∆∞ th√¨ th√™m wave t∆∞∆°ng ·ª©ng
        int lastWave = wareId % 10;
        if (lastWave > 0)
        {
            waveIndices.Add(lastWave);
        }

        Debug.Log($"G·ªôp c√°c wave: {string.Join(", ", waveIndices)}");
        return waveIndices;
    }

    
    protected override void SpawnAction(int wareId)
    {
        if (!IsSpawn || waves == null || waves.Count == 0)
        {
            Debug.LogWarning("Kh√¥ng c√≥ wave ho·∫∑c IsSpawn = false!");
            return;
        }

        List<int> waveIndices = GetWaveIndices(wareId); // L·∫•y danh s√°ch wave c·∫ßn spawn
        Debug.Log($"check waveIndices:{waveIndices}");
        foreach (int index in waveIndices)
        {
            if (index >= 1 && index <= waves.Count)
            {
                Wave currentWave = waves[index - 1]; // L·∫•y wave t∆∞∆°ng ·ª©ng

                foreach (GameObject enemyPrefab in currentWave.enemies)
                {
                    if (enemyPrefab != null)
                    {
                        GameObject newEnemy = Instantiate(enemyPrefab, GetRandomSpawnPosition(), Quaternion.identity);
                        newEnemy.transform.SetParent(enemyPool, true);
                        Debug.Log($"Spawned: {enemyPrefab.name}");
                    }
                }
            }
            else
            {
                Debug.LogError($"Wave {index} kh√¥ng h·ª£p l·ªá!");
            }
        }
    }
    private Vector3 GetRandomSpawnPosition()
    {
        Vector2 randomCircle = Random.insideUnitCircle * spawnRadius; // üî• Random trong v√≤ng tr√≤n b√°n k√≠nh `spawnRadius`
        return new Vector3(transform.position.x + randomCircle.x, transform.position.y, transform.position.z + randomCircle.y);
    }
    
}
